import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import when, lit, col

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"
redshift_table = "announcement"

# Read CSV files from S3
datasource0 = glueContext.create_dynamic_frame.from_options(
    format_options={"multiline": False, "withHeader": True},
    connection_type="s3",
    format="csv",
    connection_options={"paths": [s3_path], "recurse": True},
    transformation_ctx="datasource0"
)

# Map the columns to match the Redshift table schema
mapped_dyf = ApplyMapping.apply(
    frame=datasource0,
    mappings=[
        ("tennantid", "int", "tennantid", "int"),
        ("announcementId", "bigint", "announcementId", "bigint"),
        ("announcementNumber", "string", "announcementNumber", "string"),
        ("announcementstatus", "string", "announcementstatus", "string"),
        ("announcementTemplate", "string", "announcementTemplate", "string"),
        ("salaryType", "string", "salaryType", "string"),
        ("minimumSalary", "double", "minimumSalary", "double"),
        ("maximumSalary", "double", "maximumSalary", "double"),
        ("notToExceed", "string", "notToExceed", "string"),
        ("totalOpenings", "string", "totalOpenings", "string"),
        ("openDate", "timestamp", "openDate", "timestamp"),
        ("closeDate", "timestamp", "closeDate", "timestamp"),
        ("releasedFlag", "boolean", "releasedFlag", "boolean"),
        ("releaseddatetime", "timestamp", "releaseddatetime", "timestamp"),
        ("applicationLimitSetFlag", "boolean", "applicationLimitSetFlag", "boolean"),
        ("applicationLimit", "int", "applicationLimit", "int"),
        ("displayDefaultBenefitsTextFlag", "boolean", "displayDefaultBenefitsTextFlag", "boolean"),
        ("externalContactId", "bigint", "externalContactId", "bigint"),
        ("externalContactName", "string", "externalContactName", "string"),
        ("externalContactEmail", "string", "externalContactEmail", "string"),
        ("internalContactId", "bigint", "internalContactId", "bigint"),
        ("internalContactName", "string", "internalContactName", "string"),
        ("internalContactEmail", "string", "internalContactEmail", "string"),
        ("usajobsControlNumber", "bigint", "usajobsControlNumber", "bigint"),
        ("linkedUSAJOBSCONTROLNUMBER", "string", "linkedUSAJOBSCONTROLNUMBER", "string"),
        ("WhoMayApply", "string", "WhoMayApply", "string"),
        ("whoMayApplyOverrideText", "string", "whoMayApplyOverrideText", "string"),
        ("promotionpotential", "string", "promotionpotential", "string"),
        ("usajobstatus", "string", "usajobstatus", "string"),
        ("lastmodifieddatetime", "timestamp", "lastmodifieddatetime", "timestamp"),
        ("dwLastModifieddatetime", "timestamp", "dwLastModifieddatetime", "timestamp")
    ]
)

# Convert DynamicFrame to DataFrame for easier manipulation
df = mapped_dyf.toDF()

# Handle NULL values for NOT NULL columns
df = df.withColumn("tennantid", when(col("tennantid").isNull(), lit(8)).otherwise(col("tennantid")))
df = df.withColumn("announcementId", when(col("announcementId").isNull(), lit(-1)).otherwise(col("announcementId")))
df = df.withColumn("announcementNumber", when(col("announcementNumber").isNull(), lit("Unknown")).otherwise(col("announcementNumber")))

# Drop duplicates based on announcementId
df_no_duplicates = df.dropDuplicates(["announcementId"])

# Convert back to DynamicFrame
final_dyf = DynamicFrame.fromDF(df_no_duplicates, glueContext, "final_dyf")

# Write to Redshift
try:
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=final_dyf,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "postactions": "VACUUM FULL; ANALYZE;"
        },
        redshift_tmp_dir=redshift_temp_dir,
        transformation_ctx="datasink4"
    )
    print("Data successfully loaded into Redshift")
except Exception as e:
    print(f"Error loading data into Redshift: {str(e)}")
    # Log the error records
    error_records = final_dyf.filter(lambda x: x["tennantid"] is None or x["announcementId"] is None or x["announcementNumber"] is None)
    error_records.show(10)
    # Optionally, write error records to S3 for further analysis
    error_path = "s3://your-error-bucket/error_records/"
    glueContext.write_dynamic_frame.from_options(
        frame=error_records,
        connection_type="s3",
        connection_options={"path": error_path},
        format="csv"
    )

job.commit()
