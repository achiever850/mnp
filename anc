import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import StructType, StructField, IntegerType, LongType, StringType, FloatType, BooleanType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_announcements_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/announcements/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_table = "usastaffing_staging.announcement"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Schema for announcements table (corrected tenantid)
schema = StructType([
    StructField("tenantid", IntegerType(), False),  # Corrected from tennantid
    StructField("announcementId", LongType(), False),
    StructField("announcementNumber", StringType(), False),
    StructField("announcement_status", StringType(), True),
    StructField("announcementTemplate", StringType(), True),
    StructField("salaryType", StringType(), True),
    StructField("minimumSalary", FloatType(), True),
    StructField("maximumSalary", FloatType(), True),
    StructField("notToExceed", StringType(), True),
    StructField("totalOpenings", StringType(), True),
    StructField("openDate", StringType(), True),
    StructField("closeDate", StringType(), True),
    StructField("releasedFlag", BooleanType(), True),
    StructField("releaseddatetime", StringType(), True),
    StructField("applicationLimitSetFlag", BooleanType(), True),
    StructField("applicationLimit", IntegerType(), True),
    StructField("displayDefaultBenefitsTextFlag", BooleanType(), True),
    StructField("externalContactId", LongType(), True),
    StructField("externalContactName", StringType(), True),
    StructField("externalContactEmail", StringType(), True),
    StructField("internalContactId", LongType(), True),
    StructField("internalContactName", StringType(), True),
    StructField("internalContactEmail", StringType(), True),
    StructField("usajobsControlNumber", LongType(), True),
    StructField("linkedUSAJOBSCONTROLNUMBER", StringType(), True),
    StructField("WhoMayApply", StringType(), True),
    StructField("whoMayApplyOverrideText", StringType(), True),
    StructField("promotionpotential", StringType(), True),
    StructField("usajobstatus", StringType(), True),
    StructField("lastmodifieddatetime", StringType(), True),
    StructField("dwLastModifieddatetime", StringType(), True)
])

## Read, filter, and transform announcements data
print("Reading CSV from: {}".format(s3_announcements_path))
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .schema(schema) \
    .csv(s3_announcements_path)

print("Initial row count: {}".format(df.count()))
print("Sample raw data (first 5 rows):")
df.show(5, truncate=False)

filtered_df = df.filter(
    (col("tenantid").isNotNull()) &  # Corrected from tennantid
    (col("announcementId").isNotNull()) & 
    (col("announcementNumber").isNotNull())
)
print("Filtered row count: {}".format(filtered_df.count()))
print("Sample filtered data (first 5 rows):")
filtered_df.show(5, truncate=False)

transformed_df = filtered_df.select(
    col("tenantid"),  # Corrected from tennantid
    col("announcementId"),
    col("announcementNumber"),
    col("announcement_status"),
    col("announcementTemplate"),
    col("salaryType"),
    col("minimumSalary"),
    col("maximumSalary"),
    col("notToExceed"),
    col("totalOpenings"),
    to_timestamp(col("openDate"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("openDate"),
    to_timestamp(col("closeDate"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("closeDate"),
    col("releasedFlag"),
    to_timestamp(col("releaseddatetime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("releaseddatetime"),
    col("applicationLimitSetFlag"),
    col("applicationLimit"),
    col("displayDefaultBenefitsTextFlag"),
    col("externalContactId"),
    col("externalContactName"),
    col("externalContactEmail"),
    col("internalContactId"),
    col("internalContactName"),
    col("internalContactEmail"),
    col("usajobsControlNumber"),
    col("linkedUSAJOBSCONTROLNUMBER"),
    col("WhoMayApply"),
    col("whoMayApplyOverrideText"),
    col("promotionpotential"),
    col("usajobstatus"),
    to_timestamp(col("lastmodifieddatetime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("lastmodifieddatetime"),
    to_timestamp(col("dwLastModifieddatetime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("dwLastModifieddatetime")
)
print("Transformed row count: {}".format(transformed_df.count()))
print("Sample transformed data (first 5 rows):")
transformed_df.show(5, truncate=False)

## Write to Redshift with truncate and error handling
print("Writing to Redshift table: {}".format(redshift_table))
try:
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=DynamicFrame.fromDF(transformed_df, glueContext, "announcement_frame"),
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": redshift_table,
            "database": redshift_database,
            "preactions": f"TRUNCATE TABLE {redshift_table}"
        },
        redshift_tmp_dir=redshift_temp_dir
    )
    print("Data write completed successfully")
except Exception as e:
    print("Error writing to Redshift: {}".format(str(e)))
    raise

## Commit the job
job.commit()
