import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp, when
from pyspark.sql.types import StructType, StructField, IntegerType, LongType, StringType, BooleanType, TimestampType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_requests_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/requests/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_requests_table = "usastaffing_staging.request"  # Changed from "requests" to "request"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define requests schema (aligned with Redshift DDL)
requests_schema = StructType([
    StructField("tenantId", IntegerType(), False),
    StructField("requestId", LongType(), False),
    StructField("requestNumber", StringType(), True),
    StructField("requestType", StringType(), True),
    StructField("requestSource", StringType(), True),
    StructField("requestStatus", StringType(), True),
    StructField("hiringOrganizationName", StringType(), True),
    StructField("requesterName", StringType(), True),
    StructField("requesterEmail", StringType(), True),
    StructField("requesterPhoneNumber", StringType(), True),
    StructField("approverName", StringType(), True),
    StructField("approverEmail", StringType(), True),
    StructField("approverPhoneNumber", StringType(), True),
    StructField("creationDateTime", TimestampType(), True),
    StructField("submissionDateTime", TimestampType(), True),
    StructField("approvalDateTime", TimestampType(), True),
    StructField("hiringValidationDate", TimestampType(), True),
    StructField("personnelActionDate", TimestampType(), True),
    StructField("cancellationDate", TimestampType(), True),
    StructField("cancellationReason", StringType(), True),
    StructField("bargainingUnitPositionFlag", BooleanType(), True),
    StructField("drugTestingRequiredFlag", BooleanType(), True),
    StructField("financialDisclosureRequiredFlag", BooleanType(), True),
    StructField("relocationAuthorizedFlag", BooleanType(), True),
    StructField("supervisoryPositionFlag", BooleanType(), True),
    StructField("teleworkEligibleFlag", BooleanType(), True),
    StructField("securityClearanceRequired", StringType(), True),
    StructField("travelRequired", StringType(), True),
    StructField("hyperlink", StringType(), True),
    StructField("positionDescriptionNumbers", StringType(), True),
    StructField("positionDescriptionTitles", StringType(), True),
    StructField("remoteJobFlag", BooleanType(), True),
    StructField("positionSensitivityAndRisk", StringType(), True),
    StructField("requestProcessOwner", StringType(), True),
    StructField("requestProcessOwnerEmail", StringType(), True),
    StructField("lastModifiedDateTime", TimestampType(), True),
    StructField("dwLastModifiedDateTime", TimestampType(), True)
])

## Process data function (exact match to certificate)
def process_data(input_path, schema, table_name, connection, temp_dir):
    try:
        # Read the CSV into a DataFrame
        df = spark.read.option("header", "true") \
            .option("delimiter", ",") \
            .schema(schema) \
            .csv(input_path)
        
        # Debug: Verify DataFrame
        print(f"Schema for {table_name}:")
        df.printSchema()
        print(f"Sample data for {table_name} (raw):")
        df.show(5, truncate=False)
        print(f"Row count before filter: {df.count()}")

        # Hardcoded filter for requests (only NOT NULL columns)
        filtered_df = df.filter(
            (col("tenantId").isNotNull()) & 
            (col("requestId").isNotNull())
        )

        # Debug: Check filtered data
        print(f"Sample data after filter for {table_name}:")
        filtered_df.show(5, truncate=False)
        print(f"Row count after filter: {filtered_df.count()}")

        # Transform timestamp columns
        timestamp_columns = [
            "creationDateTime", "submissionDateTime", "approvalDateTime", "hiringValidationDate",
            "personnelActionDate", "cancellationDate", "lastModifiedDateTime", "dwLastModifiedDateTime"
        ]
        for ts_col in timestamp_columns:
            filtered_df = filtered_df.withColumn(ts_col, to_timestamp(col(ts_col), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS"))

        # Cast boolean fields
        boolean_cols = [
            "bargainingUnitPositionFlag", "drugTestingRequiredFlag", "financialDisclosureRequiredFlag",
            "relocationAuthorizedFlag", "supervisoryPositionFlag", "teleworkEligibleFlag", "remoteJobFlag"
        ]
        for b_col in boolean_cols:
            filtered_df = filtered_df.withColumn(b_col, when(col(b_col) == "true", True)
                                                .when(col(b_col) == "false", False)
                                                .otherwise(None).cast(BooleanType()))

        # Debug: Final transformed data
        print(f"Sample data after transformations for {table_name}:")
        filtered_df.show(5, truncate=False)

        # Convert to DynamicFrame
        dynamic_frame = DynamicFrame.fromDF(filtered_df, glueContext, f"{table_name}_redshift_frame")

        # Explicit mapping to enforce schema
        mappings = [(field.name, field.dataType.simpleString(), field.name, field.dataType.simpleString()) 
                    for field in schema.fields]
        mapped_frame = ApplyMapping.apply(frame=dynamic_frame, mappings=mappings)

        # Write to Redshift
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=mapped_frame,
            catalog_connection=connection,
            connection_options={
                "dbtable": table_name,
                "database": redshift_database,
                "preactions": f"TRUNCATE TABLE {table_name}",
                "createTableIfNotExists": "false",
                "redshiftTmpDir": temp_dir
            }
        )
        print(f"Data successfully loaded into {table_name}")
        
    except Exception as e:
        print(f"Error processing {table_name}: {str(e)}")
        raise

## Process requests data
process_data(
    s3_requests_input_path, requests_schema, redshift_requests_table,
    redshift_connection, redshift_temp_dir
)

## Commit the job
job.commit()
