import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/"
redshift_connection = "hcd_dev_redshift_connection"  # Glue connection name
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# List of Folders (and corresponding Redshift tables) to process
folders = [
    ("certificateApplicationApplicationIDs", "certificateapplicationapplicationID"),
    ("certificateApplicationNewHireIDs", "certificateapplicationnewhireID"),
    ("certificateApplicationRankinglistIDs", "certificateapplicationRankinglistID"),
    ("certificateApplicationRequestsIDs", "certificateapplicationrequestsID"),
    ("timeToHireAnnouncementIDs", "timtohireannouncementID"),
    ("timeToHireCustomerIDs", "timtohirecustomerID"),
    ("timeToHireNewHireIDs", "timtohirenewhireID"),
    ("timeToHireOfficeIDs", "timtohireofficeID"),
    ("timeToHireOrganizationIDs", "timtohireorganizationID"),
    ("timeToHireRequestIDs", "timtohirerequestID"),
    ("timeToHireVacancyIDs", "timtohirevacancyID")
]

# Process Each Folder
for folder, redshift_table in folders:
    print(f"Processing Folder: {folder} â†’ Redshift Table: {redshift_table}")
    
    # Construct the full S3 path to the folder
    folder_path = f"{s3_path}{folder}/"
    print(f"Full S3 Folder Path: {folder_path}")

    # Read CSV from S3
    dynamic_frame = glueContext.create_dynamic_frame.from_options(
        connection_type="s3",
        connection_options={"paths": [folder_path]},
        format="csv",
        format_options={"withHeader": True, "separator": ","}
    )

    # Convert to DataFrame
    df = dynamic_frame.toDF()
    print(f"Schema for {folder}:")
    df.printSchema()
    print(f"Sample Data from {folder}:")
    df.show(5)

    # Truncate the Redshift table before loading new data
    truncate_query = f"TRUNCATE TABLE {redshift_schema}.{redshift_table};"
    print(f"Executing: {truncate_query}")

    # Write data to Redshift with truncate option
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=dynamic_frame,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "preactions": truncate_query
        },
        redshift_tmp_dir=redshift_temp_dir
    )

# Commit Job
job.commit()
