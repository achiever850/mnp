import sys
from awsglue.transforms import * 
from awsglue.utils import getResolvedOptions 
from pyspark.context import SparkContext 
from awsglue.context import GlueContext 
from awsglue.job import Job 
from awsglue import DynamicFrame

# Get job arguments
args = getResolvedOptions(sys.argv, ["JOB_NAME"])

# Initialize GlueContext and Spark session
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Define API sources in the required order
api_sources = [
    "certificateapplicationapplicationIDs",
    "certificateapplicationnewhireIDs",
    "certificateapplicationRankinglistIDs",
    "certificateapplicationrequestsIDs"
]

# Loop through each API source
for api_name in api_sources:
    # Read CSV from S3
    try:
        print(f"Reading data for {api_name} from S3...")
        dynamic_frame = glueContext.create_dynamic_frame.from_options(
            connection_type="s3",
            format="csv",
            format_options={"withHeader": True, "separator": ","},
            connection_options={
                "paths": [f"s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/{api_name}/"],
                "recurse": True
            },
            transformation_ctx=f"AmazonS3_{api_name}"
        )
        
        # Log the number of records read
        record_count = dynamic_frame.count()
        print(f"Read {record_count} records for API: {api_name}.")

        if record_count == 0:
            print(f"No records found for API: {api_name}. Skipping...")
            continue  # Skip if no records found

        # Define the relevant columns based on the API name (headers may need to be adjusted)
        if api_name == "certificateapplicationapplicationIDs":
            dynamic_frame = dynamic_frame.select_fields(["tenantid", "CA_rankinglistid", "CA_applicationid", "applicationid"])
        elif api_name == "certificateapplicationnewhireIDs":
            dynamic_frame = dynamic_frame.select_fields(["tenantid", "CA_rankinglistid", "CA_applicationid", "newhireid"])
        elif api_name == "certificateapplicationRankinglistIDs":
            dynamic_frame = dynamic_frame.select_fields(["tenantid", "CA_rankinglistid", "CA_applicationid", "rankinglistid"])
        elif api_name == "certificateapplicationrequestsIDs":
            dynamic_frame = dynamic_frame.select_fields(["tenantid", "CA_rankinglistid", "CA_applicationid", "requestid"])

        # Log the number of records after selecting fields
        selected_count = dynamic_frame.count()
        print(f"After selecting fields, {selected_count} records remain for API: {api_name}.")

        if selected_count == 0:
            print(f"No relevant fields found for API: {api_name}. Skipping...")
            continue  # Skip if no relevant fields remain

    except Exception as e:
        print(f"Error reading data from S3 for API: {api_name} - {str(e)}")
        continue  # Skip this API if error occurs during data reading

    # Write to Amazon Redshift
    try:
        print(f"Writing data to Redshift for API: {api_name}...")
        glueContext.write_dynamic_frame.from_options(
            frame=dynamic_frame, 
            connection_type="redshift",
            connection_options={
                "redshiftTmpDir": "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/",
                "useConnectionProperties": True,  # Corrected as Boolean
                "dbtable": f"usastaffing_staging.{api_name.replace('IDs', 'ID')}",
                "connectionName": "hcd_dev_redshift_connection",
                "preactions": f"""
                    DO $$ BEGIN
                        IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'usastaffing_staging' AND table_name = '{api_name.replace('IDs', 'ID')}') THEN
                            TRUNCATE TABLE usastaffing_staging.{api_name.replace('IDs', 'ID')};
                        END IF;
                    END $$;
                """
            },
            transformation_ctx=f"AmazonRedshift_{api_name}"
        )
        print(f"Data successfully written to Redshift for API: {api_name}")

    except Exception as e:
        print(f"Error writing data to Redshift for API: {api_name} - {str(e)}")

# Commit the job
job.commit()
