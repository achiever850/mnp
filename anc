import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import StructType, StructField, IntegerType, StringType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/organizations/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_table = "usastaffing_staging.organization"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define schema based on Redshift DDL
schema = StructType([
    StructField("tenantID", IntegerType(), False),
    StructField("orgId", IntegerType(), False),
    StructField("tenantName", StringType(), True),    # varchar(100)
    StructField("tenantcode", StringType(), True),     # varchar(50)
    StructField("organizationName", StringType(), True),  # varchar(100)
    StructField("organizationCode", StringType(), True),  # varchar(20)
    StructField("dwlastModifieddatetime", StringType(), True)  # Will be converted to datetime
])

## Read, filter, and transform data
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .schema(schema) \
    .csv(s3_input_path) \
    .filter((col("tenantID").isNotNull()) & (col("orgId").isNotNull())) \
    .select(
        col("tenantID"),
        col("orgId"),
        col("tenantName"),
        col("tenantcode"),
        col("organizationName"),
        col("organizationCode"),
        to_timestamp(col("dwlastModifieddatetime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS").alias("dwlastModifieddatetime")
    )

## Write to Redshift with truncate
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=DynamicFrame.fromDF(df, glueContext, "redshift_frame"),
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": redshift_table,
        "database": redshift_database,
        "preactions": f"TRUNCATE TABLE {redshift_table}"
    },
    redshift_tmp_dir=redshift_temp_dir
)

## Commit the job
job.commit()
