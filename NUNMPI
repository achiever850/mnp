import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

## [@params: [JOB_NAME]](pplx://action/followup)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"
redshift_table = "announcement"

# Read CSV files from S3
datasource0 = glueContext.create_dynamic_frame.from_options(
    format_options={"multiline": False},
    connection_type="s3",
    format="csv",
    connection_options={"paths": [s3_path], "recurse": True},
    transformation_ctx="datasource0"
)

# Map the columns to match the Redshift table schema
mapped_dyf = ApplyMapping.apply(
    frame=datasource0,
    mappings=[
        ("col0", "int", "tennantid", "int"),
        ("col1", "bigint", "announcementId", "bigint"),
        ("col2", "string", "announcementNumber", "string"),
        ("col3", "string", "announcementstatus", "string"),
        ("col4", "string", "announcementTemplate", "string"),
        ("col5", "string", "salaryType", "string"),
        ("col6", "double", "minimumSalary", "double"),
        ("col7", "double", "maximumSalary", "double"),
        ("col8", "string", "notToExceed", "string"),
        ("col9", "string", "totalOpenings", "string"),
        ("col10", "timestamp", "openDate", "timestamp"),
        ("col11", "timestamp", "closeDate", "timestamp"),
        ("col12", "boolean", "releasedFlag", "boolean"),
        ("col13", "timestamp", "releaseddatetime", "timestamp"),
        ("col14", "boolean", "applicationLimitSetFlag", "boolean"),
        ("col15", "int", "applicationLimit", "int"),
        ("col16", "boolean", "displayDefaultBenefitsTextFlag", "boolean"),
        ("col17", "bigint", "externalContactId", "bigint"),
        ("col18", "string", "externalContactName", "string"),
        ("col19", "string", "externalContactEmail", "string"),
        ("col20", "bigint", "internalContactId", "bigint"),
        ("col21", "string", "internalContactName", "string"),
        ("col22", "string", "internalContactEmail", "string"),
        ("col23", "bigint", "usajobsControlNumber", "bigint"),
        ("col24", "string", "linkedUSAJOBSCONTROLNUMBER", "string"),
        ("col25", "string", "WhoMayApply", "string"),
        ("col26", "string", "whoMayApplyOverrideText", "string"),
        ("col27", "string", "promotionpotential", "string"),
        ("col28", "string", "usajobstatus", "string"),
        ("col29", "timestamp", "lastmodifieddatetime", "timestamp"),
        ("col30", "timestamp", "dwLastModifieddatetime", "timestamp")
    ]
)

# Convert DynamicFrame to DataFrame, drop duplicates, and convert back to DynamicFrame
df = mapped_dyf.toDF()
df_no_duplicates = df.dropDuplicates(["announcementId"])
final_dyf = DynamicFrame.fromDF(df_no_duplicates, glueContext, "final_dyf")

# Write to Redshift
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=final_dyf,
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": f"{redshift_schema}.{redshift_table}",
        "database": redshift_database
    },
    redshift_tmp_dir=redshift_temp_dir,
    transformation_ctx="datasink4"
)

job.commit()
