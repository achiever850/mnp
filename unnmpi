import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import col, to_timestamp

# Initialize Glue context and job (unchanged)
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations (unchanged)
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# List of New Folders (and corresponding Redshift tables) to process (unchanged)
folders = [
    ("announcements", "announcement"),
    # ... (other folders)
]

# Define schema mapping for announcements table
announcements_schema = {
    "tennantid": "int",
    "announcementId": "bigint",
    "announcementNumber": "string",
    "announcementStatus": "string",
    "announcementTemplate": "string",
    "salaryType": "string",
    "minimumSalary": "float",
    "maximumSalary": "float",
    "notToExceed": "string",
    "totalOpenings": "string",
    "openDate": "timestamp",
    "closeDate": "timestamp",
    "releasedFlag": "boolean",
    "releasedDateTime": "timestamp",
    "applicationLimitSetFlag": "boolean",
    "applicationLimit": "int",
    "displayDefaultBenefitsTextFlag": "boolean",
    "externalContactId": "bigint",
    "externalContactName": "string",
    "externalContactEmail": "string",
    "internalContactId": "bigint",
    "internalContactName": "string",
    "internalContactEmail": "string",
    "usajobsControlNumber": "bigint",
    "linkedUSAJOBSCONTROLNUMBER": "string",
    "WhoMayApply": "string",
    "whoMayApplyOverrideText": "string",
    "promotionpotential": "string",
    "usajobstatus": "string",
    "lastmodifieddatetime": "timestamp",
    "dwLastModifieddatetime": "timestamp"
}

# Function to apply schema to DataFrame
def apply_schema(df, schema):
    for column, data_type in schema.items():
        if data_type == "int":
            df = df.withColumn(column, col(column).cast("int"))
        elif data_type == "bigint":
            df = df.withColumn(column, col(column).cast("bigint"))
        elif data_type == "float":
            df = df.withColumn(column, col(column).cast("float"))
        elif data_type == "boolean":
            df = df.withColumn(column, col(column).cast("boolean"))
        elif data_type == "timestamp":
            df = df.withColumn(column, to_timestamp(col(column)))
        # String type doesn't need casting
    return df

# Process Each Folder
for folder, redshift_table in folders:
    print(f"Processing Folder: {folder} â†’ Redshift Table: {redshift_table}")
    
    folder_path = f"{s3_path}{folder}/"
    print(f"Full S3 Folder Path: {folder_path}")

    # Read CSV from S3
    dynamic_frame = glueContext.create_dynamic_frame.from_options(
        connection_type="s3",
        connection_options={"paths": [folder_path]},
        format="csv",
        format_options={"withHeader": True, "separator": ","}
    )

    # Convert to DataFrame and apply schema
    df = dynamic_frame.toDF()
    if folder == "announcements":
        df = apply_schema(df, announcements_schema)
    
    print(f"Schema for {folder}:")
    df.printSchema()
    print(f"Sample Data from {folder}:")
    df.show(5)

    # Convert back to DynamicFrame
    dynamic_frame_with_schema = DynamicFrame.fromDF(df, glueContext, "dynamic_frame_with_schema")

    # Truncate the Redshift table before loading new data
    truncate_query = f"TRUNCATE TABLE {redshift_schema}.{redshift_table};"
    print(f"Executing: {truncate_query}")

    # Write data to Redshift with truncate option
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=dynamic_frame_with_schema,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "preactions": truncate_query
        },
        redshift_tmp_dir=redshift_temp_dir
    )

# Commit Job
job.commit()
