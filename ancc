import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import StructType, StructField, IntegerType, StringType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
s3_input_path = s3_path + "offices/"  # Targeting the 'offices' folder
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"
redshift_table = f"{redshift_schema}.office"  # Fully qualified table name

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define schema matching Redshift DDL
schema = StructType([
    StructField("tenantId", IntegerType(), False),
    StructField("officeId", IntegerType(), False),
    StructField("officeName", StringType(), True),
    StructField("officeCode", StringType(), True),
    StructField("externalName", StringType(), True),
    StructField("addressLine1", StringType(), True),
    StructField("addressLine2", StringType(), True),
    StructField("addressLine3", StringType(), True),
    StructField("city", StringType(), True),
    StructField("zipCode", StringType(), True),
    StructField("state", StringType(), True),
    StructField("stateAbbreviation", StringType(), True),
    StructField("country", StringType(), True),
    StructField("countryAbbreviation", StringType(), True),
    StructField("phoneNumber", StringType(), True),
    StructField("faxNumber", StringType(), True),
    StructField("dwLastModifiedDateTime", StringType(), True)
])

## Read, filter, and transform data from the 'offices' folder
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .schema(schema) \
    .csv(s3_input_path) \
    .filter((col("tenantId").isNotNull()) & (col("officeId").isNotNull())) \
    .select(
        col("tenantId"),
        col("officeId"),
        col("officeName"),
        col("officeCode"),
        col("externalName"),
        col("addressLine1"),
        col("addressLine2"),
        col("addressLine3"),
        col("city"),
        col("zipCode"),
        col("state"),
        col("stateAbbreviation"),
        col("country"),
        col("countryAbbreviation"),
        col("phoneNumber"),
        col("faxNumber"),
        to_timestamp(col("dwLastModifiedDateTime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSXXX").alias("dwLastModifiedDateTime")
    )

## Write to existing Redshift table with truncate
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=DynamicFrame.fromDF(df, glueContext, "redshift_frame"),
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": redshift_table,
        "database": redshift_database,
        "preactions": f"TRUNCATE TABLE {redshift_table}"
    },
    redshift_tmp_dir=redshift_temp_dir
)

## Commit the job
job.commit()
