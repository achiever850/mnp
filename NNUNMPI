import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import StructType, StructField, IntegerType, LongType, StringType, FloatType, BooleanType, TimestampType

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
redshift_connection = "Redshift connection_hcd-dev_db"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# List of New Folders (and corresponding Redshift tables) to process
folders = [
    ("announcements", "announcement"),
    ("certificateapplications", "certificateapplication"),
    ("certificates", "certificate"),
    ("customers", "customer"),
    ("newhires", "new_hire"),
    ("offices", "office"),
    ("organizations", "organization"),
    ("tth", "tth"),
    ("requests", "request"),
]

# Define the schema for the announcements table
announcements_schema = StructType([
    StructField("tennantid", IntegerType(), True),
    StructField("announcementId", LongType(), True),
    StructField("announcementNumber", StringType(), True),
    StructField("announcementStatus", StringType(), True),
    StructField("announcementTemplate", StringType(), True),
    StructField("salaryType", StringType(), True),
    StructField("minimumSalary", FloatType(), True),
    StructField("maximumSalary", FloatType(), True),
    StructField("notToExceed", StringType(), True),
    StructField("totalOpenings", StringType(), True),
    StructField("openDate", TimestampType(), True),
    StructField("closeDate", TimestampType(), True),
    StructField("releasedFlag", BooleanType(), True),
    StructField("releasedDateTime", TimestampType(), True),
    StructField("applicationLimitSetFlag", BooleanType(), True),
    StructField("applicationLimit", IntegerType(), True),
    StructField("displayDefaultBenefitsTextFlag", BooleanType(), True),
    StructField("externalContactId", LongType(), True),
    StructField("externalContactName", StringType(), True),
    StructField("externalContactEmail", StringType(), True),
    StructField("internalContactId", LongType(), True),
    StructField("internalContactName", StringType(), True),
    StructField("internalContactEmail", StringType(), True),
    StructField("usajobsControlNumber", LongType(), True),
    StructField("linkedUSAJOBSCONTROLNUMBER", StringType(), True),
    StructField("WhoMayApply", StringType(), True),
    StructField("whoMayApplyOverrideText", StringType(), True),
    StructField("promotionpotential", StringType(), True),
    StructField("usajobstatus", StringType(), True),
    StructField("lastmodifieddatetime", TimestampType(), True),
    StructField("dwLastModifieddatetime", TimestampType(), True),
])

# Process Each Folder
for folder, redshift_table in folders:
    print(f"Processing Folder: {folder} â†’ Redshift Table: {redshift_table}")

    folder_path = f"{s3_path}{folder}/"
    print(f"Full S3 Folder Path: {folder_path}")

    # Read CSV from S3
    if folder == "announcements":
        df = spark.read.format("csv").option("header", "true").schema(announcements_schema).load(folder_path)
    else:
        df = spark.read.format("csv").option("header", "true").option("inferSchema", "true").load(folder_path)

    # Print Schema and Sample Data
    print(f"Schema for {folder}:")
    df.printSchema()
    print(f"Sample Data from {folder}:")
    df.show(5)

    # Convert DataFrame to DynamicFrame
    dynamic_frame = DynamicFrame.fromDF(df, glueContext, "dynamic_frame")

    # Truncate the Redshift table before loading new data
    truncate_query = f"TRUNCATE TABLE {redshift_schema}.{redshift_table};"
    print(f"Executing: {truncate_query}")

    # Write data to Redshift with truncate option
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=dynamic_frame,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "preactions": truncate_query
        },
        redshift_tmp_dir=redshift_temp_dir
    )

# Commit Job
job.commit()
