import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql import functions as F
from awsglue.dynamicframe import DynamicFrame

# Get the Glue context
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)

# S3 Path
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"

# Redshift Configurations
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"
redshift_table = "announcement"

# Read CSV data from S3
dyf = glueContext.create_dynamic_frame.from_options(
    format_options={"withHeader": True, "separator": ","},
    connection_type="s3",
    format="csv",
    connection_options={"paths": [s3_path]},
)

# Convert DynamicFrame to DataFrame
df = dyf.toDF()

# Print schema and column names for debugging
print("Schema of DataFrame:")
df.printSchema()
print("Column names in DataFrame:", df.columns)

# Trim and normalize column names (remove spaces, convert to lowercase)
df = df.toDF(*[c.strip().lower() for c in df.columns])

# Drop rows with null values in NOT NULL columns
df = df.dropna(subset=["tenantid", "announcementid", "announcementnumber"])

# Column mapping (rename and cast types as per Redshift DDL)
df = df.select(
    F.col("tenantid").cast("int"),
    F.col("announcementid").cast("bigint"),
    F.col("announcementnumber").cast("string"),
    F.col("announcementstatus").cast("string"),
    F.col("announcementtemplate").cast("string"),
    F.col("salarytype").cast("string"),
    F.col("minimumsalary").cast("float"),
    F.col("maximumsalary").cast("float"),
    F.col("nottoexceed").cast("string"),
    F.col("totalopenings").cast("string"),
    F.col("opendate").cast("timestamp"),
    F.col("closedate").cast("timestamp"),
    F.col("releasedflag").cast("boolean"),
    F.col("releaseddatetime").cast("timestamp"),
    F.col("applicationlimitsetflag").cast("boolean"),
    F.col("applicationlimit").cast("int"),
    F.col("displaydefaultbenefitstextflag").cast("boolean"),
    F.col("externalcontactid").cast("bigint"),
    F.col("externalcontactname").cast("string"),
    F.col("externalcontactemail").cast("string"),
    F.col("internalcontactid").cast("bigint"),
    F.col("internalcontactname").cast("string"),
    F.col("internalcontactemail").cast("string"),
    F.col("usajobscontrolnumber").cast("bigint"),
    F.col("linkedusajobscontrolnumber").cast("string"),
    F.col("whomayapply").cast("string"),
    F.col("whomayapplyoverridetext").cast("string"),
    F.col("promotionpotential").cast("string"),
    F.col("usajobstatus").cast("string"),
    F.col("lastmodifieddatetime").cast("timestamp"),
    F.col("dwlastmodifieddatetime").cast("timestamp"),
)

# Convert DataFrame back to DynamicFrame
dyf_clean = DynamicFrame.fromDF(df, glueContext, "dyf_clean")

# Write to Redshift
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=dyf_clean,
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": f"{redshift_schema}.{redshift_table}",
        "database": redshift_database,
    },
    redshift_tmp_dir=redshift_temp_dir,
)

# Commit Job
job.commit()
