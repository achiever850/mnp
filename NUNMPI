import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import col

# Initialize Glue Context
glueContext = GlueContext(SparkContext.getOrCreate())
spark = glueContext.spark_session
job = Job(glueContext)

# Define parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
job.init(args['JOB_NAME'], args)

# Redshift connection details
redshift_connection = "hcd_dev_redshift_connection"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"
redshift_table = "announcement"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
iam_role = "arn:aws-us-gov:iam::094737541415:role/project/project-hcd-glu-role"

# S3 path to the folder containing CSV files
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/announcements/"

# Read CSV files from S3
dynamic_frame = glueContext.create_dynamic_frame.from_options(
    connection_type="s3",
    connection_options={"paths": [s3_path]},
    format="csv",
    format_options={"withHeader": True}
)

# Convert to DataFrame to filter out records with null values in NOT NULL columns
df = dynamic_frame.toDF()
df_filtered = df.filter(
    (col("tennantid").isNotNull()) &
    (col("announcementId").isNotNull()) &
    (col("announcementNumber").isNotNull())
)

# Convert back to DynamicFrame
dynamic_frame_filtered = DynamicFrame.fromDF(df_filtered, glueContext, "dynamic_frame_filtered")

# Write filtered data to Redshift with postactions to truncate table
try:
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=dynamic_frame_filtered,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "postactions": f"TRUNCATE TABLE {redshift_schema}.{redshift_table}"
        },
        redshift_tmp_dir=redshift_temp_dir,
        additional_options={
            "aws_iam_role": iam_role
        }
    )
    print("Data successfully written to Redshift")
except Exception as e:
    print("Error writing data to Redshift:", str(e))
    raise e

# Commit job
job.commit()
