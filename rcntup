import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# List of Folders and Redshift tables
folders = [
    ("certificateApplicationApplicationIDs", "certificateapplicationapplicationid"),
    ("certificateApplicationNewHireIDs", "certificateapplicationnewhireid"),
    ("certificateApplicationRankinglistIDs", "certificateapplicationrankinglistid"),
    ("certificateApplicationRequestsIDs", "certificateapplicationrequestsid"),
    ("timeToHireAnnouncementIDs", "timetohireannouncementid"),
    ("timeToHireCustomerIDs", "timetohirecustomerid"),
    ("timeToHireNewHireIDs", "timetohirenewhireid"),
    ("timeToHireOfficeIDs", "timetohireofficeid"),
    ("timeToHireOrganizationIDs", "timetohireorganizationid"),
    ("timeToHireRequestIDs", "timetohirerequestid"),
    ("timeToHireVacancyIDs", "timetohirevacancyid")
]

# Process Each Folder
for folder, redshift_table in folders:
    try:
        print(f"\nProcessing Folder: {folder} â†’ Redshift Table: {redshift_table}")
        
        # Construct the full S3 path to the folder
        folder_path = f"{s3_path}{folder}/"
        print(f"Full S3 Folder Path: {folder_path}")

        # Read CSV from S3 with explicit header handling
        dynamic_frame = glueContext.create_dynamic_frame.from_options(
            connection_type="s3",
            connection_options={"paths": [folder_path], "recurse": True},
            format="csv",
            format_options={"header": True, "separator": ",", "quoteChar": "\"", "skipBlankLines": True}
        )

        # Check schema and data after reading
        print(f"Schema for {folder} after reading:")
        dynamic_frame.printSchema()
        print(f"Sample Data from {folder} (raw):")
        dynamic_frame.show(5)
        row_count_read = dynamic_frame.count()
        print(f"Row count for {folder} after reading: {row_count_read}")
        if row_count_read == 0:
            print(f"WARNING: No data read from {folder_path} - check folder contents or CSV format")
            continue

        # Convert to DataFrame to inspect column names
        df = dynamic_frame.toDF()
        print(f"Column names from CSV for {folder}: {df.columns}")

        # Write to Redshift with truncate
        full_table_name = f"{redshift_schema}.{redshift_table}"
        truncate_query = f"TRUNCATE TABLE {full_table_name};"
        print(f"Executing truncate: {truncate_query}")
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=dynamic_frame,
            catalog_connection=redshift_connection,
            connection_options={
                "dbtable": full_table_name,
                "database": redshift_database,
                "preactions": truncate_query
            },
            redshift_tmp_dir=redshift_temp_dir
        )
        print(f"Write operation completed for {full_table_name}")

    except Exception as e:
        print(f"Error processing {folder}: {str(e)}")
        continue

# Commit Job
print("\nJob execution completed - committing job")
job.commit()
