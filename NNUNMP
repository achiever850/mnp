import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import *

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_announcement_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/announcements/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_announcement_table = "usastaffing_staging.announcement"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define schema for announcement
ddl_schema = StructType([
    StructField("tenantId", IntegerType(), False),
    StructField("announcementId", LongType(), False),
    StructField("announcementNumber", StringType(), False),
    StructField("announcementStatus", StringType(), True),
    StructField("announcementTemplate", StringType(), True),
    StructField("salaryType", StringType(), True),
    StructField("minimumSalary", FloatType(), True),
    StructField("maximumSalary", FloatType(), True),
    StructField("notToExceed", StringType(), True),
    StructField("totalOpenings", StringType(), True),
    StructField("openDate", TimestampType(), True),
    StructField("closeDate", TimestampType(), True),
    StructField("releasedFlag", BooleanType(), True),
    StructField("releasedDateTime", TimestampType(), True),
    StructField("applicationLimitSetFlag", BooleanType(), True),
    StructField("applicationLimit", IntegerType(), True),
    StructField("displayDefaultBenefitsTextFlag", BooleanType(), True),
    StructField("externalContactId", LongType(), True),
    StructField("externalContactName", StringType(), True),
    StructField("externalContactEmail", StringType(), True),
    StructField("internalContactId", LongType(), True),
    StructField("internalContactName", StringType(), True),
    StructField("internalContactEmail", StringType(), True),
    StructField("usajobsControlNumber", LongType(), True),
    StructField("linkedUSAJOBSControlNumber", StringType(), True),
    StructField("whoMayApply", StringType(), True),
    StructField("whoMayApplyOverrideText", StringType(), True),
    StructField("remoteJobClarificationText", StringType(), True),
    StructField("appointmentTypeOverrideText", StringType(), True),
    StructField("promotionPotential", StringType(), True),
    StructField("usajobsJobStatus", StringType(), True),
    StructField("lastModifiedDateTime", TimestampType(), True),
    StructField("dwLastModifiedDateTime", TimestampType(), True)
])

## Read and process announcement data
announcement_df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .schema(ddl_schema) \
    .csv(s3_announcement_input_path)

announcement_filtered_df = announcement_df.filter((col("tenantId").isNotNull()) & (col("announcementId").isNotNull()))

## Write announcements data to Redshift
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=DynamicFrame.fromDF(announcement_filtered_df, glueContext, "announcement_redshift_frame"),
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": redshift_announcement_table,
        "database": redshift_database,
        "preactions": f"TRUNCATE TABLE {redshift_announcement_table}"
    },
    redshift_tmp_dir=redshift_temp_dir
)

## Commit the job
job.commit()
