import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp
from pyspark.sql.types import StructType, StructField, IntegerType, LongType, StringType, BooleanType, FloatType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_announcement_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/announcements/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_announcement_table = "usastaffing_staging.announcement"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define schema for announcements
announcement_schema = StructType([
    StructField("tenantId", IntegerType(), False),
    StructField("announcementId", LongType(), False),
    StructField("announcementNumber", StringType(), False),
    StructField("announcementStatus", StringType(), True),
    StructField("announcementTemplate", StringType(), True),
    StructField("salaryType", StringType(), True),
    StructField("minimumSalary", FloatType(), True),
    StructField("maximumSalary", FloatType(), True),
    StructField("notToExceed", StringType(), True),
    StructField("totalOpenings", StringType(), True),
    StructField("openDate", StringType(), True),
    StructField("closeDate", StringType(), True),
    StructField("releasedFlag", BooleanType(), True),
    StructField("releasedDateTime", StringType(), True),
    StructField("applicationLimitSetFlag", BooleanType(), True),
    StructField("applicationLimit", IntegerType(), True),
    StructField("displayDefaultBenefitsTextFlag", BooleanType(), True),
    StructField("externalContactId", LongType(), True),
    StructField("externalContactName", StringType(), True),
    StructField("externalContactEmail", StringType(), True),
    StructField("internalContactId", LongType(), True),
    StructField("internalContactName", StringType(), True),
    StructField("internalContactEmail", StringType(), True),
    StructField("usajobsControlNumber", LongType(), True),
    StructField("linkedUSAJOBSControlNumber", StringType(), True),
    StructField("whoMayApply", StringType(), True),
    StructField("whoMayApplyOverrideText", StringType(), True),
    StructField("remoteJobClarificationText", StringType(), True),
    StructField("appointmentTypeOverrideText", StringType(), True),
    StructField("promotionPotential", StringType(), True),
    StructField("usajobsJobStatus", StringType(), True),
    StructField("lastModifiedDateTime", StringType(), True),
    StructField("dwlastmodifiedDateTime", StringType(), True)
])

## Read and process announcement data
announcement_df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .schema(announcement_schema) \
    .csv(s3_announcement_input_path)

# Debug: Check schema and sample data before filtering
print("Announcement DataFrame Schema:")
announcement_df.printSchema()
print("Sample raw data:")
announcement_df.show(5, truncate=False)

announcement_filtered_df = announcement_df.filter((col("tenantId").isNotNull()) & (col("announcementId").isNotNull()) & (col("announcementNumber").isNotNull())) \
    .withColumn("openDate", to_timestamp(col("openDate"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS")) \
    .withColumn("closeDate", to_timestamp(col("closeDate"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS")) \
    .withColumn("releasedDateTime", to_timestamp(col("releasedDateTime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS")) \
    .withColumn("lastModifiedDateTime", to_timestamp(col("lastModifiedDateTime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS")) \
    .withColumn("dwlastmodifiedDateTime", to_timestamp(col("dwlastmodifiedDateTime"), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS"))

# Debug: Check filtered data and row count
print("Filtered DataFrame Schema:")
announcement_filtered_df.printSchema()
print("Sample filtered data:")
announcement_filtered_df.show(5, truncate=False)
row_count = announcement_filtered_df.count()
print(f"Number of rows to write: {row_count}")

## Convert to DynamicFrame
announcement_dynamic_frame = DynamicFrame.fromDF(announcement_filtered_df, glueContext, "announcement_redshift_frame")

# Workaround for applying limit: Convert DynamicFrame to DataFrame, apply limit, and then convert back
announcement_sample_df = announcement_filtered_df.limit(10)
announcement_sample_dynamic_frame = DynamicFrame.fromDF(announcement_sample_df, glueContext, "announcement_sample_frame")

# Test writing a small subset (first 10 rows) to Redshift for connection testing
try:
    print("Writing a small sample of data to Redshift for connection testing...")
    
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=announcement_sample_dynamic_frame,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": redshift_announcement_table,
            "database": redshift_database
        },
        redshift_tmp_dir=redshift_temp_dir
    )
    print("Successfully wrote a small sample to Redshift.")
except Exception as e:
    print(f"Error during sample write: {str(e)}")
    raise

## Write full data to Redshift with error handling
try:
    print("Writing full data to Redshift...")
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=announcement_dynamic_frame,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": redshift_announcement_table,
            "database": redshift_database
        },
        redshift_tmp_dir=redshift_temp_dir
    )
    print("Successfully wrote data to Redshift.")
except Exception as e:
    print(f"Error writing to Redshift: {str(e)}")
    raise

## Commit the job
job.commit()
print("Job completed successfully")
