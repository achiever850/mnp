import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.types import IntegerType, LongType

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Common configurations
s3_base_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# Dataset configurations
datasets = {
    "certificateApplicationApplicationIDs": {
        "folder_name": "certificateApplicationApplicationIDs",
        "redshift_table": "certificateApplicationApplicationID",
        "columns": [("tenantid", "int"), ("ca_rankinglistid", "bigint"), ("ca_applicationid", "bigint"), ("applicationid", "bigint")],
        "types": {"tenantid": IntegerType(), "ca_rankinglistid": LongType(), "ca_applicationid": LongType(), "applicationid": LongType()}
    },
    "certificateApplicationRankingListId": {
        "folder_name": "certificateApplicationRankingListId",
        "redshift_table": "certificateApplicationRankingListId",
        "columns": [("tenantid", "int"), ("ca_rankinglistid", "bigint"), ("ca_applicationid", "bigint"), ("rankinglistid", "bigint")],
        "types": {"tenantid": IntegerType(), "ca_rankinglistid": LongType(), "ca_applicationid": LongType(), "rankinglistid": LongType()}
    }
}

# Processing function
def process_dataset(folder_name, redshift_table, redshift_columns, redshift_types):
    full_table_name = f"{redshift_schema}.{redshift_table}"
    folder_path = f"{s3_base_path}{folder_name}/"
    redshift_col_names = [col[0] for col in redshift_columns]

    try:
        print(f"\nProcessing Folder: {folder_name} â†’ Redshift Table: {full_table_name}")

        # Read CSV with explicit schema to avoid inference issues
        dynamic_frame = glueContext.create_dynamic_frame.from_options(
            connection_type="s3",
            connection_options={"paths": [folder_path], "recurse": True},
            format="csv",
            format_options={"header": True, "separator": ",", "quoteChar": "\"", "skipBlankLines": True, "ignoreLeadingWhiteSpace": True, "ignoreTrailingWhiteSpace": True}
        )
        row_count = dynamic_frame.count()
        print(f"Row count for {folder_name}: {row_count}")
        if row_count == 0:
            raise Exception("No data to process")

        # Inspect raw data
        print(f"Raw Schema for {folder_name}:")
        dynamic_frame.printSchema()
        print(f"Raw Sample Data for {folder_name}:")
        dynamic_frame.show(5)

        # Convert to DataFrame
        df = dynamic_frame.toDF()
        print(f"CSV Column names for {folder_name}: {df.columns}")

        # Map columns
        csv_columns = [col.lower() for col in df.columns]
        if all(col.startswith('col') for col in csv_columns):
            print(f"WARNING: No headers detected - mapping by position")
            if len(df.columns) != len(redshift_col_names):
                raise Exception(f"Column count mismatch - CSV: {len(df.columns)}, Redshift: {len(redshift_col_names)}")
            df = df.toDF(*redshift_col_names)
        else:
            expected_col_names = [col.lower() for col in redshift_col_names]
            if len(csv_columns) != len(expected_col_names) or set(csv_columns) != set(expected_col_names):
                raise Exception(f"Column mismatch - CSV: {csv_columns}, Expected: {expected_col_names}")
            csv_to_redshift = {csv_col.lower(): red_col for csv_col, red_col in zip(df.columns, redshift_col_names)}
            mapped_columns = [csv_to_redshift.get(col.lower(), col) for col in df.columns]
            df = df.toDF(*mapped_columns)

        # Cast columns and debug nulls before/after
        print(f"Before casting - Sample Data:")
        df.show(5)
        for col_name in df.columns:
            pre_null_count = df.filter(df[col_name].isNull()).count()
            print(f"Pre-cast nulls in {col_name}: {pre_null_count}")

        for col_name in df.columns:
            df = df.withColumn(col_name, df[col_name].cast(redshift_types[col_name]))

        print(f"After casting - Sample Data:")
        df.show(5)
        for col_name in df.columns:
            post_null_count = df.filter(df[col_name].isNull()).count()
            print(f"Post-cast nulls in {col_name}: {post_null_count}")

        # Convert back to DynamicFrame
        filtered_dynamic_frame = DynamicFrame.fromDF(df, glueContext, f"{folder_name}_filtered")

        # Write to Redshift
        truncate_query = f"TRUNCATE TABLE {full_table_name};"
        print(f"Executing: {truncate_query}")
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=filtered_dynamic_frame,
            catalog_connection=redshift_connection,
            connection_options={
                "dbtable": full_table_name,
                "database": redshift_database,
                "preactions": truncate_query,
                "createTableIfNotExists": "false",
                "redshiftTmpDir": redshift_temp_dir
            },
            redshift_tmp_dir=redshift_temp_dir
        )
        print(f"Write completed for {full_table_name}")

    except Exception as e:
        print(f"Error processing {folder_name}: {str(e)}")
        raise

# Process both datasets
for dataset_name, config in datasets.items():
    process_dataset(
        folder_name=config["folder_name"],
        redshift_table=config["redshift_table"],
        redshift_columns=config["columns"],
        redshift_types=config["types"]
    )

# Commit Job
print("\nJob execution completed - committing job")
job.commit()
