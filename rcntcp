import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/"
redshift_connection = "hcd_dev_redshift_connection"  # Glue connection name
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# File Mapping: (Folder Name, Redshift Table, Unique Column)
csv_folders = [
    ("certificateapplicationapplicationIDs", "certificateapplicationapplicationID", "applicationid"),
    ("certificateapplicationnewhireIDs", "certificateapplicationnewhireID", "newhireid"),
    ("certificateapplicationRankinglistIDs", "certificateapplicationRankinglistID", "rankinglistid"),
    ("certificateapplicationrequestsIDs", "certificateapplicationrequestsID", "requestsid")
]

# Process Each Folder
for folder_name, redshift_table, unique_id in csv_folders:
    print(f"Processing {folder_name} â†’ {redshift_table}")

    # Construct the path for the folder
    folder_path = f"{s3_path}{folder_name}/"
    print(f"Reading from folder: {folder_path}")

    # Read CSV files from the folder
    dynamic_frame = glueContext.create_dynamic_frame.from_options(
        connection_type="s3",
        connection_options={"paths": [folder_path]},
        format="csv",
        format_options={"withHeader": True, "separator": ","}
    )

    # Convert to DataFrame and Show Sample Data
    df = dynamic_frame.toDF()
    print(f"Schema for {folder_name}:")
    df.printSchema()
    print(f"Sample Data from {folder_name}:")
    df.show(5)

    # Check if DataFrame is empty
    record_count = df.count()
    print(f"Number of records read from S3: {record_count}")
    if record_count == 0:
        print(f"No data found in {folder_name}, skipping...")
        continue

    # Convert DataFrame back to DynamicFrame
    transformed_frame = DynamicFrame.fromDF(df, glueContext, "transformed_frame")

    # Write to Redshift
    print(f"Writing to Redshift Table: {redshift_schema}.{redshift_table}")
    glueContext.write_dynamic_frame.from_jdbc_conf(
        frame=transformed_frame,
        catalog_connection=redshift_connection,
        connection_options={
            "dbtable": f"{redshift_schema}.{redshift_table}",
            "database": redshift_database,
            "preactions": f"""
                CREATE TABLE IF NOT EXISTS {redshift_schema}.{redshift_table} (
                    tenantid VARCHAR(255),
                    CA_rankinglistid VARCHAR(255),
                    CA_applicationid VARCHAR(255),
                    {unique_id} VARCHAR(255)
                );
            """
        },
        redshift_tmp_dir=redshift_temp_dir
    )

# Commit Job
job.commit()
