import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.context import SparkContext
from pyspark.sql.functions import col, to_timestamp, when
from pyspark.sql.types import StructType, StructField, IntegerType, FloatType, StringType, BooleanType

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

## Configurations
s3_certificate_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/certificates/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_certificate_table = "usastaffing_staging.certificate"

## Initialize contexts
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

## Define certificate schema (aligned with Redshift)
certificate_schema = StructType([
    StructField("tenantId", IntegerType(), False),
    StructField("rankingListId", IntegerType(), False),
    StructField("certificateNumber", StringType(), True),
    StructField("certificateType", StringType(), True),
    StructField("certificateStatus", StringType(), True),
    StructField("certificateOrder", StringType(), True),
    StructField("certificatePriorityOrder", StringType(), True),
    StructField("applicantListName", StringType(), True),
    StructField("signedDateTime", StringType(), True),
    StructField("issueDateTime", StringType(), True),
    StructField("issuer", StringType(), True),
    StructField("certificateAuditedFlag", BooleanType(), True),
    StructField("initialAuditCompleteDateTime", StringType(), True),
    StructField("finalAuditCompleteDateTime", StringType(), True),
    StructField("auditedBy", StringType(), True),
    StructField("referMethod", StringType(), True),
    StructField("referMethodNumber", FloatType(), True),
    StructField("certificateAmendedFlag", BooleanType(), True),
    StructField("certificateCancelledFlag", BooleanType(), True),
    StructField("certificateExpiredFlag", BooleanType(), True),
    StructField("certificateExpirationDate", StringType(), True),
    StructField("ctapictapWellQualifiedScore", FloatType(), True),
    StructField("rankBy", StringType(), True),
    StructField("tieBreaker", StringType(), True),
    StructField("candidateInventoryEnabledFlag", BooleanType(), True),
    StructField("candidateInventoryStartDate", StringType(), True),
    StructField("candidateInventoryEndDate", StringType(), True),
    StructField("lastModifiedDateTime", StringType(), True),
    StructField("dwLastModifiedDateTime", StringType(), True)
])

## Process data function with simplified filter and extra debugging
def process_data(input_path, schema, table_name, key_columns, timestamp_columns, connection, temp_dir):
    try:
        # Read the CSV into a DataFrame
        df = spark.read.option("header", "true") \
            .option("delimiter", ",") \
            .schema(schema) \
            .csv(input_path)
        
        # Debug: Verify DataFrame is not empty and schema matches
        print(f"Schema for {table_name}:")
        df.printSchema()
        print(f"Sample data for {table_name} (raw):")
        df.show(5, truncate=False)
        print(f"Row count before filter: {df.count()}")

        # Check if key columns exist
        missing_cols = [key for key in key_columns if key not in df.columns]
        if missing_cols:
            raise ValueError(f"Key columns not found in DataFrame: {missing_cols}")

        # Simplified explicit filter (avoid dynamic chaining)
        filtered_df = df.filter(
            col("tenantId").isNotNull() & col("rankingListId").isNotNull()
        )

        # Debug: Check filtered data
        print(f"Sample data after filter for {table_name}:")
        filtered_df.show(5, truncate=False)
        print(f"Row count after filter: {filtered_df.count()}")

        # Transform timestamp columns
        for ts_col in timestamp_columns:
            filtered_df = filtered_df.withColumn(ts_col, to_timestamp(col(ts_col), "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS"))

        # Cast boolean fields (assuming CSV has "true"/"false" strings)
        boolean_cols = ["certificateAuditedFlag", "certificateAmendedFlag", "certificateCancelledFlag",
                        "certificateExpiredFlag", "candidateInventoryEnabledFlag"]
        for b_col in boolean_cols:
            filtered_df = filtered_df.withColumn(b_col, when(col(b_col) == "true", True)
                                                .when(col(b_col) == "false", False)
                                                .otherwise(None).cast(BooleanType()))

        # Debug: Final transformed data
        print(f"Sample data after transformations for {table_name}:")
        filtered_df.show(5, truncate=False)

        # Convert to DynamicFrame
        dynamic_frame = DynamicFrame.fromDF(filtered_df, glueContext, f"{table_name}_redshift_frame")
        
        # Write to Redshift
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=dynamic_frame,
            catalog_connection=connection,
            connection_options={
                "dbtable": table_name,
                "database": redshift_database,
                "preactions": f"TRUNCATE TABLE {table_name}"
            },
            redshift_tmp_dir=temp_dir
        )
        print(f"Data successfully loaded into {table_name}")
        
    except Exception as e:
        print(f"Error processing {table_name}: {str(e)}")
        raise  # Re-raise to see full stack trace in logs

## Process certificate data
process_data(
    s3_certificate_input_path, certificate_schema, redshift_certificate_table,
    key_columns=["tenantId", "rankingListId"],
    timestamp_columns=["signedDateTime", "issueDateTime", "initialAuditCompleteDateTime",
                      "finalAuditCompleteDateTime", "certificateExpirationDate",
                      "lastModifiedDateTime", "dwLastModifiedDateTime"],
    connection=redshift_connection, temp_dir=redshift_temp_dir
)

## Commit the job
job.commit()
