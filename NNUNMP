import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql.functions import col, to_timestamp

## Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

job_name = args['JOB_NAME']

## Hardcoded configurations
s3_input_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/"
redshift_connection = "hcd_dev_redshift_connection"
redshift_temp_dir = "s3://aws-glue-assets-094737541415-us-gov-west-1/temporary/"
redshift_database = "hcd-dev-db"
redshift_table = "usastaffing_staging.office"

## Initialize Spark and Glue context
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(job_name, args)

## Read CSV from S3 (assumes CSV files in the folder have headers)
csv_df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .csv(s3_input_path)

## Map and cast columns to match Redshift table schema
csv_df = csv_df.select(
    col("tennantId").cast("integer").alias("tennantId"),
    col("officeId").cast("bigint").alias("officeId"),
    col("officeName").cast("string").alias("officeName"),
    col("officeCode").cast("string").alias("officeCode"),
    col("externalName").cast("string").alias("externalName"),
    col("addressline1").cast("string").alias("addressline1"),
    col("addressline2").cast("string").alias("addressline2"),
    col("addressline3").cast("string").alias("addressline3"),
    col("city").cast("string").alias("city"),
    col("zipcode").cast("string").alias("zipcode"),
    col("state").cast("string").alias("state"),
    col("stateabbrevation").cast("string").alias("stateabbrevation"),
    col("country").cast("string").alias("country"),
    col("countryAbbrevation").cast("string").alias("countryAbbrevation"),
    col("phonenumber").cast("string").alias("phonenumber"),
    col("faxnumber").cast("string").alias("faxnumber"),
    to_timestamp(col("dwlastmodifiedDateTime"), "yyyy-MM-dd HH:mm:ss").alias("dwlastmodifiedDateTime")
)

## Write to Redshift
glueContext.write_dynamic_frame.from_jdbc_conf(
    frame=DynamicFrame.fromDF(csv_df, glueContext, "redshift_frame"),
    catalog_connection=redshift_connection,
    connection_options={
        "dbtable": redshift_table,
        "database": redshift_database
    },
    redshift_tmp_dir=redshift_temp_dir
)

## Commit the job
job.commit()
