import sys
import boto3
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# Initialize Glue context and job
args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# S3 and Redshift Configurations
s3_path = "s3://hcd-ec2-windows-servers-file-transfer-bucket/usa_staffing_csv/external_id_csv/"
redshift_connection = "your-redshift-connection-name"  # Glue connection name
redshift_temp_dir = "s3://your-temp-bucket/temp-dir/"
redshift_database = "hcd-dev-db"
redshift_schema = "usastaffing_staging"

# File Mapping: (Folder Name in S3, Redshift Table, Unique Column)
csv_folders = [
    ("certificateapplicationapplicationIDs", "certificateapplicationapplicationID", "applicationid"),
    ("certificateapplicationnewhireIDs", "certificateapplicationnewhireID", "newhireid"),
    ("certificateapplicationRankinglistIDs", "certificateapplicationRankinglistID", "rankinglistid"),
    ("certificateapplicationrequestsIDs", "certificateapplicationrequestsID", "requestsid")
]

# Initialize S3 Client
s3_client = boto3.client("s3")

def list_csv_files_in_folder(folder_path):
    """List all CSV files in a given S3 folder"""
    csv_files = []
    response = s3_client.list_objects_v2(Bucket="hcd-ec2-windows-servers-file-transfer-bucket", Prefix=folder_path)
    if "Contents" in response:
        for obj in response["Contents"]:
            if obj["Key"].endswith(".csv"):
                csv_files.append(f"s3://hcd-ec2-windows-servers-file-transfer-bucket/{obj['Key']}")
    return csv_files

# Process Each Folder
for folder_name, redshift_table, unique_id in csv_folders:
    print(f"Processing folder: {folder_name} â†’ Redshift Table: {redshift_table}")

    # List all CSV files in the folder
    csv_files = list_csv_files_in_folder(f"{s3_path}{folder_name}/")
    
    if not csv_files:
        print(f"No CSV files found in {folder_name}, skipping.")
        continue

    for csv_file in csv_files:
        print(f"Processing file: {csv_file}")

        # Read CSV from S3
        dynamic_frame = glueContext.create_dynamic_frame.from_options(
            connection_type="s3",
            connection_options={"paths": [csv_file]},
            format="csv",
            format_options={"withHeader": True, "separator": ","}
        )

        # Convert to DataFrame and Show Sample Data
        df = dynamic_frame.toDF()
        print(f"Schema for {csv_file}:")
        df.printSchema()
        print(f"Sample Data from {csv_file}:")
        df.show(5)

        # Convert DataFrame back to DynamicFrame
        transformed_frame = DynamicFrame.fromDF(df, glueContext, "transformed_frame")

        # Write to Redshift
        print(f"Writing to Redshift Table: {redshift_schema}.{redshift_table}")
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=transformed_frame,
            catalog_connection=redshift_connection,
            connection_options={
                "dbtable": f"{redshift_schema}.{redshift_table}",
                "database": redshift_database,
                "preactions": f"""
                    CREATE TABLE IF NOT EXISTS {redshift_schema}.{redshift_table} (
                        tenantid VARCHAR(255),
                        CA_rankinglistid VARCHAR(255),
                        CA_applicationid VARCHAR(255),
                        {unique_id} VARCHAR(255)
                    );
                """
            },
            redshift_tmp_dir=redshift_temp_dir
        )

# Commit Job
job.commit()
